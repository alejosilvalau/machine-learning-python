import torch
from torch import nn
from torch.nn import CrossEntropyLoss

# Sample input tensor: batch of 5 samples, each with 16 features
sample = torch.randn(5, 16)

# Target labels: 5 class labels (for classification into 2 classes)
target = torch.tensor([0, 1, 1, 0, 1]) 

# Run a forward pass
model = nn.Sequential(nn.Linear(16, 8),
                      nn.Linear(8, 4),
                      nn.Linear(4, 2))
prediction = model(sample)

# Calculate the loss and gradients
criterion = CrossEntropyLoss()
loss = criterion(prediction, target)
loss.backward()

# Print the data:
print("Sample input:", sample)

# Access each layer's gradients
print("First layer weight gradients:", model[0].weight.grad)
print("First layer bias gradients:", model[0].bias.grad)
print("Second layer weight gradients:", model[1].weight.grad)
print("Second layer bias gradients:", model[1].bias.grad) 
print("Output layer weight gradients:", model[2].weight.grad)
print("Output layer bias gradients:", model[2].bias.grad)

"""
Example output:
Sample input: tensor([[ 1.4046,  0.7653,  2.2406,  0.9657,  1.2556,  0.6326,  1.4649,  1.0854,
          0.9029,  0.4190,  0.3138,  0.5963,  0.5512,  1.2702, -0.2835, -0.2040],
        [-1.4085, -0.9821, -1.1638, -0.5281, -0.0342,  0.3776, -1.5854,  0.6131,
         -1.3663,  0.1315,  1.5974,  1.2866,  0.8944, -0.1433, -1.7267,  0.3776],
        [-1.5855,  0.6011, -0.1348,  1.3603,  0.7529, -0.2095,  1.4962,  1.0866,
         -1.0054, -0.5537,  0.3879,  0.4042, -0.2657,  0.4856, -1.4857, -0.0553],
        [-2.2098,  1.1196,  0.6388,  1.8527,  0.4336,  1.8380, -1.0979,  2.2153,
         -0.6113,  0.9615,  0.1973,  0.7489,  0.1003,  0.8406,  0.4242,  0.3153],
        [-2.0321,  0.3076,  0.6305, -0.3408, -1.1909, -0.1021,  0.9540,  1.6703,
         -0.0555,  1.2142, -0.3508,  0.8875,  0.9559,  0.4554,  0.9029,  2.1969]])

First layer weight gradients: 
tensor([[-1.2818e-01, -4.4997e-02, -9.0143e-02, -5.1631e-02, -5.7719e-02,
         -5.0237e-02,  1.8379e-03,  1.6843e-02, -7.5300e-02, -6.5249e-03,
          2.9742e-02,  3.7700e-02,  2.6381e-02, -3.0103e-02, -5.7565e-02,
          6.8501e-02],
        [-7.1081e-02, -2.4953e-02, -4.9989e-02, -2.8632e-02, -3.2008e-02,
         -2.7859e-02,  1.0192e-03,  9.3401e-03, -4.1758e-02, -3.6184e-03,
          1.6493e-02,  2.0906e-02,  1.4630e-02, -1.6694e-02, -3.1923e-02,
          3.7987e-02],
        [-5.1688e-02, -1.8145e-02, -3.6350e-02, -2.0820e-02, -2.3275e-02,
         -2.0258e-02,  7.4113e-04,  6.7918e-03, -3.0365e-02, -2.6312e-03,
          1.1993e-02,  1.5203e-02,  1.0638e-02, -1.2139e-02, -2.3213e-02,
          2.7623e-02],
        [ 8.6368e-02,  3.0320e-02,  6.0739e-02,  3.4789e-02,  3.8891e-02,
          3.3850e-02, -1.2384e-03, -1.1349e-02,  5.0738e-02,  4.3965e-03,
         -2.0040e-02, -2.5403e-02, -1.7776e-02,  2.0284e-02,  3.8788e-02,
         -4.6156e-02],
        [ 9.0518e-02,  3.1776e-02,  6.3658e-02,  3.6461e-02,  4.0760e-02,
          3.5477e-02, -1.2979e-03, -1.1894e-02,  5.3176e-02,  4.6078e-03,
         -2.1003e-02, -2.6623e-02, -1.8630e-02,  2.1259e-02,  4.0652e-02,
         -4.8374e-02],
        [-9.8787e-02, -3.4679e-02, -6.9473e-02, -3.9792e-02, -4.4484e-02,
         -3.8718e-02,  1.4164e-03,  1.2981e-02, -5.8034e-02, -5.0287e-03,
          2.2922e-02,  2.9055e-02,  2.0332e-02, -2.3201e-02, -4.4366e-02,
          5.2793e-02],
        [ 4.0937e-02,  1.4371e-02,  2.8790e-02,  1.6490e-02,  1.8434e-02,
          1.6045e-02, -5.8698e-04, -5.3792e-03,  2.4049e-02,  2.0839e-03,
         -9.4988e-03, -1.2041e-02, -8.4256e-03,  9.6144e-03,  1.8385e-02,
         -2.1878e-02],
        [ 4.0442e-03,  1.4197e-03,  2.8441e-03,  1.6290e-03,  1.8211e-03,
          1.5850e-03, -5.7986e-05, -5.3141e-04,  2.3758e-03,  2.0587e-04,
         -9.3839e-04, -1.1895e-03, -8.3236e-04,  9.4981e-04,  1.8163e-03,
         -2.1613e-03]])
First layer bias gradients: 
tensor([ 0.0320,  0.0177,  0.0129, -0.0216, -0.0226,  0.0247, -0.0102, -0.0010])

Second layer weight gradients: 
tensor([[-0.0427, -0.0307,  0.0022,  0.0536, -0.0119, -0.0645, -0.0270, -0.0213],
        [ 0.0974,  0.0700, -0.0051, -0.1225,  0.0273,  0.1472,  0.0615,  0.0487],
        [ 0.0272,  0.0196, -0.0014, -0.0343,  0.0076,  0.0412,  0.0172,  0.0136],
        [ 0.0383,  0.0275, -0.0020, -0.0482,  0.0107,  0.0579,  0.0242,  0.0191]])
Second layer bias gradients: 
tensor([-0.0323,  0.0738,  0.0206,  0.0290])

Output layer weight gradients: 
tensor([[-0.1823,  0.0365,  0.1351,  0.1499],
        [ 0.1823, -0.0365, -0.1351, -0.1499]])
Output layer bias gradients: 
tensor([ 0.1397, -0.1397])
"""